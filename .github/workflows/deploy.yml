name: üöÄ Deploy BIGS

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build_backend:
    name: üê≥ Build & Push Backend
    runs-on: ubuntu-latest
    steps:
      - name: üîÑ Checkout code
        uses: actions/checkout@v4
      - name: üîë Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: üèóÔ∏è Build & Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./env/backend/Dockerfile
          push: true
          tags: ximikat01/bigs_backend:latest
      - name: üìù –ò—Ç–æ–≥ (backend)
        run: echo "‚úÖ Backend —Å–æ–±—Ä–∞–Ω –∏ –∑–∞–ø—É—à–µ–Ω: ximikat01/bigs_backend:latest" >> $GITHUB_STEP_SUMMARY

  build_frontend:
    name: üê≥ Build & Push Frontend
    runs-on: ubuntu-latest
    steps:
      - name: üîÑ Checkout code
        uses: actions/checkout@v4
      - name: üîë Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: üèóÔ∏è Build & Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./env/frontend/Dockerfile
          push: true
          tags: ximikat01/bigs_frontend:latest
      - name: üìù –ò—Ç–æ–≥ (frontend)
        run: echo "‚úÖ Frontend —Å–æ–±—Ä–∞–Ω –∏ –∑–∞–ø—É—à–µ–Ω: ximikat01/bigs_frontend:latest" >> $GITHUB_STEP_SUMMARY

  deploy:
    name: üöÄ Deploy on server
    runs-on: ubuntu-latest
    needs: [ build_backend, build_frontend ]
    steps:
      - name: üîÑ Checkout code
        uses: actions/checkout@v4
      - name: üîë Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.SSH_PORT }} -t rsa ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          echo "‚úÖ SSH –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω"
      - name: üìÅ Ensure remote dirs exist
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p '${{ secrets.PROJECT_DIR }}/env/frontend'"
          echo "üìÇ –£–±–µ–¥–∏–ª–∏—Å—å, —á—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
      - name: üì§ Copy files & restart services
        run: |
          echo "üì¶ –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä"
          scp -i ~/.ssh/id_rsa -P ${{ secrets.SSH_PORT }} docker-compose.production.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.PROJECT_DIR }}/docker-compose.production.yml
          scp -i ~/.ssh/id_rsa -P ${{ secrets.SSH_PORT }} env/frontend/nginx.conf ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.PROJECT_DIR }}/env/frontend/nginx.conf
          echo "üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–µ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e
          cd ${{ secrets.PROJECT_DIR }}
          docker compose -f docker-compose.production.yml pull
          docker compose -f docker-compose.production.yml down
          docker compose -f docker-compose.production.yml up -d
          EOF
          echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω"
      - name: üìù –ò—Ç–æ–≥ (deploy)
        run: echo "‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${{ secrets.SSH_HOST }}" >> $GITHUB_STEP_SUMMARY

  verify:
    name: ‚úÖ Verify deployment
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: üîë Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.SSH_PORT }} -t rsa ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
      - name: üîé docker ps
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'"
          echo "üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞" >> $GITHUB_STEP_SUMMARY

  notify:
    name: üì£ Notify Telegram
    runs-on: ubuntu-latest
    if: always()
    needs: [ deploy ]
    steps:
      - name: üì¢ Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            üöÄ BIGS Deployment *${{ needs.deploy.result }}*
            üì¶ Repo: https://github.com/${{ github.repository }}
            üîó Commit: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
